{"version":3,"sources":["configContext.js","components/Navbar/index.js","components/Wrapper/index.js","pages/Game/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["createContext","Provider","Consumer","ConfigProvider","state","highscore","currentscore","lastClicked","clickedIcons","icons","handleClick","clicked","updatedClicked","shuffledIcons","newCurrentScore","newHighScore","lost","map","element","alert","push","setState","console","log","sort","Math","random","value","this","shuffleArray","props","children","Component","Navbar","context","className","to","Wrapper","Game","onClick","key","role","aria-label","height","width","style","backgroundImage","Header","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69b28f50.chunk.js","sourcesContent":["import React, { Component, createContext } from \"react\";\n// import { scryRenderedComponentsWithType } from \"react-dom/test-utils\";\n\n//connecting Highscore and Currentscore\nconst { Provider, Consumer } = createContext();\n\n//provider will be exported in configprovider class \n//HAVE TO DEFINE PROVIDER BECAUSE ITS PROVIDEING, DONT HAVE TO DEFINE CONSUMER BECAUSE ITS JUST USING THOSE VALUES\n\nclass ConfigProvider extends Component {\n    state = {\n        highscore: 0,\n        currentscore: 0,\n        lastClicked: \"\",\n        clickedIcons: [],\n        icons: [\"./images/doberman1.jpg\", \"./images/doberman2.jpg\", \"./images/doberman3.jpg\", \"./images/doberman4.jpg\", \"./images/doberman5.jpg\", \"./images/doberman6.jpg\", \"./images/doberman7.jpg\", \"./images/doberman8.jpg\", \"./images/doberman9.jpg\"],\n        handleClick: (clicked) => {\n            const { highscore, currentscore, clickedIcons, icons } = this.state;\n            // variables to help with updating state\n            let updatedClicked = clickedIcons;\n            let shuffledIcons = icons;\n            let newCurrentScore = currentscore;\n            let newHighScore = highscore;\n            //user has not lost\n            let lost = false;\n            // if array is not empty\n            // iterate through array contents\n            clickedIcons.map(element => {\n                /// if one of the elements matches what was just clicked\n                if (element === clicked) {\n                    //we tell them they lost\n                    lost = true;\n                    alert(\"you lost\");\n                    // if it didnt match anything\n                }\n            })\n\n\n            if (lost === false) {\n                // update our update vars\n                updatedClicked.push(clicked);\n                newCurrentScore += 1;\n                newHighScore += 1;\n                //pushing the state up\n                this.setState({ clickedIcons: updatedClicked })\n                this.setState({ currentscore: newCurrentScore });\n                this.setState({ highscore: newHighScore });\n\n            }else{\n                console.log(\"itsa me\");\n                updatedClicked =[];\n                newCurrentScore=0;\n                this.setState({ clickedIcons: updatedClicked })\n                this.setState({ currentscore: newCurrentScore });\n\n\n            }\n            // no matter what we shuffle the array\n            //shuffle array\n            shuffledIcons.sort(() => Math.random() - 0.5);\n            shuffledIcons.sort(()=> Math.random() - 0.5);\n            shuffledIcons.sort(() => Math.random() - 0.5);\n\n            // update array to shuffled array\n            this.setState({ icons: shuffledIcons });\n            console.log(highscore, currentscore,clickedIcons,icons);\n\n        }\n\n    };\n\n    render() {\n        return (\n            <Provider value={{\n                highscore: this.state.highscore,\n                currentscore: this.state.currentscore,\n                clickedIcons: this.state.clickedIcons,\n                icons: this.state.icons,\n                shuffleArray: this.state.shuffleArray,\n                handleClick: this.state.handleClick\n            }}>\n                {this.props.children}\n            </Provider>\n\n        )\n    }\n}\nexport { ConfigProvider };\n\nexport default Consumer;\n\n\n\n   //     icons: [\n    //         {\n    //         backgroundImage: 'url(\"/images/doberman1.jpg\")'\n    //     },\n    //     {\n    //         backgroundImage: 'url(\"/images/doberman2.jpg\")'\n    //     }\n    // ]\n\n        //FUNCTIONS I WANT TO PASS\n        //`{background-image: url('./images/doberman1.jpg');}`,\n        // didWin: () => {\n        //     this.state.clickedIcons.map(element => {\n        //         if (element === lastClicked) {\n        //             console.log(\"You lost\")\n        //         }\n        //     })\n        // },\n        // handleClick: () => {\n        //     console.log(this.state);\n        //     didWin();\n        // }\n        // didWin: () => {\n        //     this.state.clickedIcons.map(element => {\n        //         if (element === lastClicked) {\n        //             console.log(\"You lost\")\n        //         }\n        //     })\n        // }","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.css\";\nimport Consumer from \"../../configContext.js\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nconst Navbar = props => {\n  return (\n    <Consumer>\n      {context => {\n        return (\n          <nav className=\"navbar navbar-expand-lg navbar-light  sticky\">\n            <Link className=\"navbar-brand\" to=\"/\">\n              Clicky Game\n          </Link>\n          <div className=\"navbar-brand center\">\n            Click Image To Begin!\n          </div>\n          <div className=\"navbar-brand right\">\n          Highscore: {context.highscore} | Score: {context.currentscore}\n          </div>\n            {/* <a className=\"navbar-brand\">Click Image to Begin!</a>\n            <a className=\"navbar-brand\"> {context.highscore} | {context.currentscore}</a> */}\n           \n        \n          </nav>\n        )\n      }}\n\n\n    </Consumer>\n  )\n}\n\n// function Navbar() {\n//   return (\n//     <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n//       <Link className=\"navbar-brand\" to=\"/\">\n//         Clicky Game\n//       </Link>\n//       <div>\n//         <ul className=\"navbar-nav\">\n//           <li className=\"nav-brand\">\n//             Click Image to Begin!\n//           </li>\n//           <li className=\"nav-brand\">\n//             {/* Score: State*/}\n//           </li>\n//         </ul>\n//       </div>\n//     </nav>\n//   );\n// }\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport \"./style.css\";\nimport Consumer from \"../../configContext\";\n\nconst Game = props => {\n\n    return (\n        <Consumer>\n            {context => {\n                return (\n                    <div className=\"container\" >\n                            {context.icons.map(element => (\n                                <div onClick={ ()=> context.handleClick(`${element}`)} className=\"icons click-item shake\" key={element} role=\"img\" aria-label=\"click item\" height=\"50px\" width=\"50px\" style={{ backgroundImage: `url(${element})` }}>\n                                </div>\n                            ))}\n                    </div>\n                )\n            }}\n\n\n        </Consumer>\n\n    )\n\n}\n\n\nexport default Game;\n{/* <div class=\"icons click-item shake\" role=\"img\" aria-label=\"click item\" width=\"50px\" style=\"background-image: url(&quot;./images/doberman2.jpg&quot;);\"></div>\n<div role=\"img\" aria-label=\"click item\" class=\"click-item shake\" style=\"background-image: url(&quot;/assets/images/mr.png&quot;);\"></div> */}","import React from \"react\";\nimport \"./style.css\";\nconst Header = props =>{\n    return(\n        <div className=\"head\">\n            <h1>Play that Clicky</h1>\n        </div>\n    )\n}\n\nexport default Header;","import * as React from \"react\";\nimport { ConfigProvider } from \"./configContext\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport Game from \"./pages/Game\";\nimport Header from \"./components/Header\";\n\n// const ScoreContext = React.createContext(0);\n// const HighscoreContext = React.createContext(0);\n\nfunction App() {\n  return (\n    <div className=\"div\">\n    <ConfigProvider>\n    <Router>\n    <Navbar/>\n    <Header/>\n    <Wrapper>\n    <Route exact path=\"/\" component={Game}/>\n    </Wrapper>\n    </Router>\n    </ConfigProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}